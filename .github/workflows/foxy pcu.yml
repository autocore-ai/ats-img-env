name: foxy pcu

on:
  push:
    branches:
      - 'main'
      - 'dev'
    tags:
      - v*

  workflow_dispatch:

jobs:
  foxy-pcu:
    runs-on: ubuntu-latest
    env:
      REPO: https://github.com/${{ github.repository }}
      FROM_SRC_IMAGE: ghcr.io/${{ github.repository_owner }}/src-ros2
      DOCKER_REPO_1: ghcr.io/${{ github.repository_owner }}/core-foxy-pcu
      DOCKER_REPO_2: ghcr.io/${{ github.repository_owner }}/base-foxy-pcu
      DOCKER_REPO_3: ghcr.io/${{ github.repository_owner }}/base-foxy-pcu_tmp
      DOCKER_REPO_4: ghcr.io/${{ github.repository_owner }}/runtime-foxy-pcu
      DOCKER_REPO_5: ghcr.io/${{ github.repository_owner }}/runtime-foxy-pcu_tmp
      DOCKER_REPO_6: ghcr.io/${{ github.repository_owner }}/build-foxy-pcu
      DOCKER_REPO_7: ghcr.io/${{ github.repository_owner }}/devel-foxy-pcu
    steps:
    -
      name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}
    - 
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Config Outputs
      id: config
      run: |
        config="--output \"type=image,push=true\" --platform linux/arm64"
        export CONFIG=$config
        echo ::set-output name=CONFIG::$CONFIG
    -
      name: Get VER
      id: ver
      run: |
        ver=$(git describe --exact-match --tags $(git log -n1 --pretty='%h')) || ver=latest
        export VER=$ver
        echo ::set-output name=VER::$VER
    -
      name: Get SHA
      id: sha
      run: |
        sha=$(git rev-list --max-count=1 HEAD)
        export SHA=$sha
        echo ::set-output name=SHA::$SHA
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Build and push the core docker image
      run: |
        TAG=${{ steps.ver.outputs.VER }}
        TAGS="--tag ${DOCKER_REPO_1}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_1}:${TAG}"
        fi
        docker buildx build ${{ steps.config.outputs.CONFIG }} ${TAGS} --build-arg REPO=$REPO --build-arg VER=${{ steps.ver.outputs.VER }} --build-arg SHA=${{ steps.sha.outputs.SHA }} --build-arg FROM_IMAGE=ubuntu:focal --file core.dockerfile .
    - 
      name: Build and push the base docker image
      run: |
        TAG=${{ steps.ver.outputs.VER }}
        TAGS="--tag ${DOCKER_REPO_2}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_2}:${TAG}"
        fi
        docker buildx build ${{ steps.config.outputs.CONFIG }} ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_1 --file base.foxy.dockerfile .
    - 
      name: Build and push the runtime docker image
      run: |
        TAG=${{ steps.ver.outputs.VER }}
        TAGS="--tag ${DOCKER_REPO_3}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_3}:${TAG}"
        fi
        docker buildx build ${{ steps.config.outputs.CONFIG }} ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_2 --file runtime.foxy.dockerfile .
        TAGS="--tag ${DOCKER_REPO_4}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_4}:${TAG}"
        fi
        docker buildx build ${{ steps.config.outputs.CONFIG }} ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_3 --file runtime.dockerfile .
    - 
      name: Build and push the build docker image
      run: |
        TAG=${{ steps.ver.outputs.VER }}
        TAGS="--tag ${DOCKER_REPO_5}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_5}:${TAG}"
        fi
        docker buildx build ${{ steps.config.outputs.CONFIG }} ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_4 --build-arg FROM_SRC_IMAGE=$FROM_SRC_IMAGE --file build.foxy.dockerfile .
        TAGS="--tag ${DOCKER_REPO_6}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_6}:${TAG}"
        fi
        docker buildx build ${{ steps.config.outputs.CONFIG }} ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_5 --file build.dockerfile .
    - 
      name: Build and push the devel docker image
      run: |
        TAG=${{ steps.ver.outputs.VER }}
        TAGS="--tag ${DOCKER_REPO_7}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_7}:${TAG}"
        fi
        docker buildx build ${{ steps.config.outputs.CONFIG }} ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_6  --file devel.dockerfile .